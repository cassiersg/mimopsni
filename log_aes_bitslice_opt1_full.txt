➜  global-ni-sni git:(master) ✗ python aes_bitslice.py 
baseline cut 176
Starting optimization...
DEBUG:pulp.solvers:/home/cgaetan/.local/lib/python3.6/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/71fbd84e127f433c9ccc6be6ddb7af25-pulp.mps threads 4 sec 3600 branch printingOptions all solution /tmp/71fbd84e127f433c9ccc6be6ddb7af25-pulp.sol 
Welcome to the CBC MILP Solver 
Version: 2.9.0 
Build Date: Feb 12 2015 

command line - /home/cgaetan/.local/lib/python3.6/site-packages/pulp/solverdir/cbc/linux/64/cbc /tmp/71fbd84e127f433c9ccc6be6ddb7af25-pulp.mps threads 4 sec 3600 branch printingOptions all solution /tmp/71fbd84e127f433c9ccc6be6ddb7af25-pulp.sol (default strategy 1)
At line 2 NAME          MODEL
At line 3 ROWS
At line 28146 COLUMNS
At line 118757 RHS
At line 146899 BOUNDS
At line 161843 ENDATA
Problem MODEL has 28141 rows, 14943 columns and 88148 elements
Coin0008I MODEL read with 0 errors
threads was changed from 0 to 4
seconds was changed from 1e+100 to 3600
Continuous objective value is 186 - 2.60 seconds
Cgl0003I 0 fixed, 0 tightened bounds, 673 strengthened rows, 0 substitutions
Cgl0004I processed model has 7280 rows, 6329 columns (1023 integer (1023 of which binary)) and 37003 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0038I Initial state - 797 integers unsatisfied sum - 231.051
Cbc0038I Pass   1: (9.57 seconds) suminf.   15.33333 (39) obj. 246.083 iterations 4006
Cbc0038I Pass   2: (9.74 seconds) suminf.    0.00000 (0) obj. 248 iterations 519
Cbc0038I Solution found of 248
Cbc0038I Relaxing continuous gives 248
Cbc0038I Rounding solution of 244 is better than previous of 248

Cbc0038I Before mini branch and bound, 223 integers at bound fixed and 3925 continuous
Cbc0038I Full problem 7280 rows 6329 columns, reduced to 5554 rows 2119 columns - 123 fixed gives 3805, 1580 - ok now
Cbc0038I Full problem 7280 rows 6329 columns, reduced to 2916 rows 1341 columns
Cbc0038I Mini branch and bound improved solution from 244 to 231 (18.18 seconds)
Cbc0038I Round again with cutoff of 227.128
Cbc0038I Pass   3: (19.38 seconds) suminf.   39.40771 (182) obj. 227.128 iterations 1988
Cbc0038I Pass   4: (19.81 seconds) suminf.   26.48465 (123) obj. 227.128 iterations 902
Cbc0038I Pass   5: (19.97 seconds) suminf.   24.59346 (86) obj. 227.128 iterations 356
Cbc0038I Pass   6: (20.12 seconds) suminf.   23.81371 (75) obj. 227.128 iterations 300
Cbc0038I Pass   7: (20.19 seconds) suminf.   22.31371 (72) obj. 227.128 iterations 146
Cbc0038I Pass   8: (20.27 seconds) suminf.   22.31371 (72) obj. 227.128 iterations 117
Cbc0038I Pass   9: (20.38 seconds) suminf.   19.49841 (73) obj. 227.128 iterations 207
Cbc0038I Pass  10: (20.46 seconds) suminf.   18.49841 (71) obj. 227.128 iterations 142
Cbc0038I Pass  11: (20.50 seconds) suminf.   18.49841 (71) obj. 227.128 iterations 21
Cbc0038I Pass  12: (20.54 seconds) suminf.   18.49841 (71) obj. 227.128 iterations 30
Cbc0038I Pass  13: (22.54 seconds) suminf.   46.44733 (124) obj. 227.128 iterations 3478
Cbc0038I Pass  14: (23.10 seconds) suminf.   27.19430 (71) obj. 227.128 iterations 1086
Cbc0038I Pass  15: (23.34 seconds) suminf.   25.81645 (66) obj. 227.128 iterations 419
Cbc0038I Pass  16: (23.53 seconds) suminf.   23.71645 (67) obj. 227.128 iterations 346
Cbc0038I Pass  17: (23.62 seconds) suminf.   22.46645 (67) obj. 227.128 iterations 176
Cbc0038I Pass  18: (23.77 seconds) suminf.   19.48355 (61) obj. 227.128 iterations 244
Cbc0038I Pass  19: (24.05 seconds) suminf.   14.51645 (61) obj. 227.128 iterations 628
Cbc0038I Pass  20: (24.10 seconds) suminf.   14.51645 (61) obj. 227.128 iterations 60
Cbc0038I Pass  21: (24.39 seconds) suminf.   14.15253 (63) obj. 227.128 iterations 465
Cbc0038I Pass  22: (24.94 seconds) suminf.   14.77753 (52) obj. 227.128 iterations 954
Cbc0038I Pass  23: (25.09 seconds) suminf.   14.39304 (56) obj. 227.128 iterations 219
Cbc0038I Pass  24: (25.26 seconds) suminf.   13.83038 (50) obj. 227.128 iterations 261
Cbc0038I Pass  25: (25.44 seconds) suminf.   13.76645 (54) obj. 227.128 iterations 316
Cbc0038I Pass  26: (25.47 seconds) suminf.   13.76645 (54) obj. 227.128 iterations 3
Cbc0038I Pass  27: (25.98 seconds) suminf.   15.56919 (49) obj. 227.128 iterations 866
Cbc0038I Pass  28: (26.17 seconds) suminf.   13.83038 (50) obj. 227.128 iterations 332
Cbc0038I Pass  29: (26.28 seconds) suminf.   13.76645 (54) obj. 227.128 iterations 188
Cbc0038I Pass  30: (26.31 seconds) suminf.   13.76645 (54) obj. 227.128 iterations 16
Cbc0038I Pass  31: (28.38 seconds) suminf.   42.11075 (120) obj. 227.128 iterations 3131
Cbc0038I Pass  32: (29.36 seconds) suminf.   15.98860 (33) obj. 227.128 iterations 1685
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 139 integers at bound fixed and 3516 continuous
Cbc0038I Full problem 7280 rows 6329 columns, reduced to 6212 rows 2590 columns - 451 fixed gives 1007, 746 - ok now
Cbc0038I Full problem 7280 rows 6329 columns, reduced to 416 rows 327 columns
Cbc0038I Mini branch and bound improved solution from 231 to 228 (30.59 seconds)
Cbc0038I Round again with cutoff of 221.856
Cbc0038I Pass  32: (31.39 seconds) suminf.   56.86959 (273) obj. 221.856 iterations 885
Cbc0038I Pass  33: (32.47 seconds) suminf.   36.59701 (124) obj. 221.856 iterations 1746
Cbc0038I Pass  34: (32.99 seconds) suminf.   30.20547 (120) obj. 221.856 iterations 869
Cbc0038I Pass  35: (33.21 seconds) suminf.   29.74432 (122) obj. 221.856 iterations 406
Cbc0038I Pass  36: (33.37 seconds) suminf.   26.18880 (113) obj. 221.856 iterations 334
Cbc0038I Pass  37: (33.42 seconds) suminf.   26.07212 (110) obj. 221.856 iterations 71
Cbc0038I Pass  38: (33.65 seconds) suminf.   23.79987 (100) obj. 221.856 iterations 401
Cbc0038I Pass  39: (33.70 seconds) suminf.   23.79987 (100) obj. 221.856 iterations 40
Cbc0038I Pass  40: (33.75 seconds) suminf.   23.79987 (100) obj. 221.856 iterations 49
Cbc0038I Pass  41: (36.29 seconds) suminf.   28.13161 (102) obj. 221.856 iterations 3901
Cbc0038I Pass  42: (37.25 seconds) suminf.   10.26654 (35) obj. 221.856 iterations 1400
Cbc0038I Pass  43: (37.32 seconds) suminf.   10.26654 (35) obj. 221.856 iterations 71
Cbc0038I Pass  44: (38.12 seconds) suminf.    7.92239 (17) obj. 221.856 iterations 1337
Cbc0038I Pass  45: (39.04 seconds) suminf.    3.57761 (10) obj. 221.856 iterations 1512
Cbc0038I Pass  46: (39.15 seconds) suminf.    3.57761 (10) obj. 221.856 iterations 94
Cbc0038I Pass  47: (39.83 seconds) suminf.    3.43320 (9) obj. 221.856 iterations 1226
Cbc0038I Pass  48: (40.21 seconds) suminf.    3.43320 (9) obj. 221.856 iterations 616
Cbc0038I Pass  49: (40.25 seconds) suminf.    3.43320 (9) obj. 221.856 iterations 15
Cbc0038I Pass  50: (40.73 seconds) suminf.    3.43320 (9) obj. 221.856 iterations 902
Cbc0038I Pass  51: (41.12 seconds) suminf.    3.43320 (9) obj. 221.856 iterations 673
Cbc0038I Pass  52: (41.16 seconds) suminf.    3.43320 (9) obj. 221.856 iterations 24
Cbc0038I Pass  53: (41.20 seconds) suminf.    3.43320 (9) obj. 221.856 iterations 46
Cbc0038I Pass  54: (41.46 seconds) suminf.    3.43320 (9) obj. 221.856 iterations 592
Cbc0038I Pass  55: (41.67 seconds) suminf.    3.43320 (9) obj. 221.856 iterations 334
Cbc0038I Pass  56: (41.70 seconds) suminf.    3.43320 (9) obj. 221.856 iterations 1
Cbc0038I Pass  57: (42.20 seconds) suminf.    3.43320 (9) obj. 221.856 iterations 960
Cbc0038I Pass  58: (42.58 seconds) suminf.    3.43320 (9) obj. 221.856 iterations 615
Cbc0038I Pass  59: (42.62 seconds) suminf.    3.43320 (9) obj. 221.856 iterations 17
Cbc0038I Pass  60: (45.87 seconds) suminf.   48.49427 (162) obj. 221.856 iterations 4666
Cbc0038I Pass  61: (47.97 seconds) suminf.   25.28341 (98) obj. 221.856 iterations 2818
Cbc0038I Rounding solution of 226 is better than previous of 228

Cbc0038I Before mini branch and bound, 127 integers at bound fixed and 3477 continuous
Cbc0038I Full problem 7280 rows 6329 columns, reduced to 6381 rows 2659 columns - 458 fixed gives 1036, 761 - ok now
Cbc0038I Mini branch and bound did not improve solution (49.04 seconds)
Cbc0038I Round again with cutoff of 215.682
Cbc0038I Pass  61: (49.86 seconds) suminf.   77.66294 (339) obj. 215.682 iterations 1212
Cbc0038I Pass  62: (50.81 seconds) suminf.   59.93522 (275) obj. 215.682 iterations 1544
Cbc0038I Pass  63: (51.82 seconds) suminf.   55.28212 (195) obj. 215.682 iterations 1333
Cbc0038I Pass  64: (52.23 seconds) suminf.   50.07455 (187) obj. 215.682 iterations 469
Cbc0038I Pass  65: (52.84 seconds) suminf.   47.04735 (164) obj. 215.682 iterations 1124
Cbc0038I Pass  66: (52.98 seconds) suminf.   46.15147 (150) obj. 215.682 iterations 301
Cbc0038I Pass  67: (53.22 seconds) suminf.   46.15147 (150) obj. 215.682 iterations 261
Cbc0038I Pass  68: (53.49 seconds) suminf.   42.37024 (145) obj. 215.682 iterations 350
Cbc0038I Pass  69: (53.74 seconds) suminf.   39.70358 (146) obj. 215.682 iterations 499
Cbc0038I Pass  70: (53.83 seconds) suminf.   39.54617 (145) obj. 215.682 iterations 155
Cbc0038I Pass  71: (53.90 seconds) suminf.   39.54617 (145) obj. 215.682 iterations 112
Cbc0038I Pass  72: (53.97 seconds) suminf.   39.54617 (145) obj. 215.682 iterations 115
Cbc0038I Pass  73: (54.03 seconds) suminf.   39.54617 (145) obj. 215.682 iterations 98
Cbc0038I Pass  74: (54.10 seconds) suminf.   39.54617 (145) obj. 215.682 iterations 117
Cbc0038I Pass  75: (54.15 seconds) suminf.   39.54617 (145) obj. 215.682 iterations 92
Cbc0038I Pass  76: (54.20 seconds) suminf.   39.54617 (145) obj. 215.682 iterations 89
Cbc0038I Pass  77: (54.27 seconds) suminf.   39.54617 (145) obj. 215.682 iterations 98
Cbc0038I Pass  78: (54.31 seconds) suminf.   39.54617 (145) obj. 215.682 iterations 25
Cbc0038I Pass  79: (54.41 seconds) suminf.   39.54617 (145) obj. 215.682 iterations 93
Cbc0038I Pass  80: (54.56 seconds) suminf.   39.54617 (145) obj. 215.682 iterations 158
Cbc0038I Pass  81: (54.60 seconds) suminf.   39.54617 (145) obj. 215.682 iterations 54
Cbc0038I Pass  82: (54.70 seconds) suminf.   39.54617 (145) obj. 215.682 iterations 149
Cbc0038I Pass  83: (54.79 seconds) suminf.   39.54617 (145) obj. 215.682 iterations 109
Cbc0038I Pass  84: (54.88 seconds) suminf.   39.54617 (145) obj. 215.682 iterations 110
Cbc0038I Pass  85: (54.94 seconds) suminf.   39.54617 (145) obj. 215.682 iterations 103
Cbc0038I Pass  86: (55.06 seconds) suminf.   39.54617 (145) obj. 215.682 iterations 151
Cbc0038I Pass  87: (55.10 seconds) suminf.   39.54617 (145) obj. 215.682 iterations 84
Cbc0038I Pass  88: (55.16 seconds) suminf.   39.54617 (145) obj. 215.682 iterations 86
Cbc0038I Pass  89: (55.22 seconds) suminf.   39.54617 (145) obj. 215.682 iterations 96
Cbc0038I Pass  90: (55.26 seconds) suminf.   39.54617 (145) obj. 215.682 iterations 53
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 167 integers at bound fixed and 3646 continuous
Cbc0038I Full problem 7280 rows 6329 columns, reduced to 6008 rows 2458 columns - 426 fixed gives 1028, 748 - ok now
Cbc0038I Mini branch and bound did not improve solution (55.98 seconds)
Cbc0038I After 55.98 seconds - Feasibility pump exiting with objective of 226 - took 49.40 seconds
Cbc0012I Integer solution of 226 found by feasibility pump after 0 iterations and 0 nodes (56.08 seconds)
Cbc0031I 94 added rows had average density of 129.46809
Cbc0013I At root node, 94 cuts changed objective from 201.27759 to 203.25847 in 14 passes
Cbc0014I Cut generator 0 (Probing) - 1 row cuts average 7.0 elements, 0 column cuts (0 active)  in 0.137 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 1460 row cuts average 287.4 elements, 0 column cuts (0 active)  in 3.060 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.104 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.041 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 10 row cuts average 11.3 elements, 0 column cuts (0 active)  in 0.822 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 1 row cuts average 8.0 elements, 0 column cuts (0 active)  in 0.215 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 620 row cuts average 103.7 elements, 0 column cuts (0 active)  in 1.546 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 226 best solution, best possible 203.25847 (97.16 seconds)
Cbc0010I After 100 nodes, 55 on tree, 226 best solution, best possible 203.43835 (441.85 seconds)
Cbc0010I After 200 nodes, 106 on tree, 226 best solution, best possible 203.43835 (609.45 seconds)
Cbc0012I Integer solution of 219 found by heuristic after 298566 iterations and 299 nodes (807.84 seconds)
Cbc0010I After 300 nodes, 161 on tree, 219 best solution, best possible 203.43835 (807.84 seconds)
Cbc0010I After 400 nodes, 211 on tree, 219 best solution, best possible 203.43835 (869.19 seconds)
Cbc0010I After 500 nodes, 263 on tree, 219 best solution, best possible 203.43835 (920.63 seconds)
Cbc0010I After 600 nodes, 314 on tree, 219 best solution, best possible 203.43835 (949.01 seconds)
Cbc0010I After 700 nodes, 363 on tree, 219 best solution, best possible 203.43835 (977.21 seconds)
Cbc0010I After 800 nodes, 414 on tree, 219 best solution, best possible 203.43835 (1011.33 seconds)
Cbc0010I After 900 nodes, 461 on tree, 219 best solution, best possible 203.43835 (1036.46 seconds)
Cbc0010I After 1000 nodes, 512 on tree, 219 best solution, best possible 203.43835 (1069.98 seconds)
Cbc0010I After 1100 nodes, 562 on tree, 219 best solution, best possible 203.43835 (1097.10 seconds)
Cbc0010I After 1200 nodes, 612 on tree, 219 best solution, best possible 203.43835 (1118.83 seconds)
Cbc0010I After 1300 nodes, 663 on tree, 219 best solution, best possible 203.43835 (1147.90 seconds)
Cbc0010I After 1400 nodes, 713 on tree, 219 best solution, best possible 203.43835 (1167.61 seconds)
Cbc0010I After 1500 nodes, 762 on tree, 219 best solution, best possible 203.43835 (1191.76 seconds)
Cbc0010I After 1600 nodes, 812 on tree, 219 best solution, best possible 203.43835 (1204.55 seconds)
Cbc0010I After 1700 nodes, 862 on tree, 219 best solution, best possible 203.43835 (1221.25 seconds)
Cbc0010I After 1800 nodes, 911 on tree, 219 best solution, best possible 203.43835 (1236.53 seconds)
Cbc0010I After 1900 nodes, 969 on tree, 219 best solution, best possible 203.43835 (1252.31 seconds)
Cbc0010I After 2000 nodes, 1013 on tree, 219 best solution, best possible 203.43835 (1268.05 seconds)
Cbc0010I After 2100 nodes, 1062 on tree, 219 best solution, best possible 203.43835 (1279.18 seconds)
Cbc0010I After 2200 nodes, 1113 on tree, 219 best solution, best possible 203.43835 (1299.26 seconds)
Cbc0012I Integer solution of 218 found by heuristic after 579255 iterations and 2216 nodes (1302.46 seconds)
Cbc0010I After 2300 nodes, 1162 on tree, 218 best solution, best possible 203.43835 (1314.13 seconds)
Cbc0010I After 2400 nodes, 1212 on tree, 218 best solution, best possible 203.43835 (1324.74 seconds)
Cbc0010I After 2500 nodes, 1261 on tree, 218 best solution, best possible 203.43835 (1339.80 seconds)
Cbc0010I After 2600 nodes, 1312 on tree, 218 best solution, best possible 203.43835 (1353.13 seconds)
Cbc0010I After 2700 nodes, 1363 on tree, 218 best solution, best possible 203.43835 (1373.24 seconds)
Cbc0010I After 2800 nodes, 1412 on tree, 218 best solution, best possible 203.43835 (1389.54 seconds)
Cbc0010I After 2900 nodes, 1461 on tree, 218 best solution, best possible 203.43835 (1400.43 seconds)
Cbc0010I After 3000 nodes, 1513 on tree, 218 best solution, best possible 203.43835 (1420.71 seconds)
Cbc0010I After 3100 nodes, 1561 on tree, 218 best solution, best possible 203.43835 (1456.19 seconds)
Cbc0010I After 3200 nodes, 1611 on tree, 218 best solution, best possible 203.43835 (1475.29 seconds)
Cbc0010I After 3300 nodes, 1661 on tree, 218 best solution, best possible 203.43835 (1487.51 seconds)
Cbc0010I After 3400 nodes, 1712 on tree, 218 best solution, best possible 203.43835 (1503.56 seconds)
Cbc0010I After 3500 nodes, 1763 on tree, 218 best solution, best possible 203.43835 (1515.26 seconds)
Cbc0010I After 3600 nodes, 1812 on tree, 218 best solution, best possible 203.43835 (1535.14 seconds)
Cbc0010I After 3700 nodes, 1862 on tree, 218 best solution, best possible 203.43835 (1554.01 seconds)
Cbc0010I After 3800 nodes, 1912 on tree, 218 best solution, best possible 203.43835 (1573.16 seconds)
Cbc0010I After 3900 nodes, 1981 on tree, 218 best solution, best possible 203.43835 (1584.44 seconds)
Cbc0010I After 4000 nodes, 2011 on tree, 218 best solution, best possible 203.43835 (1596.81 seconds)
Cbc0010I After 4100 nodes, 2064 on tree, 218 best solution, best possible 203.43835 (1605.23 seconds)
Cbc0010I After 4200 nodes, 2113 on tree, 218 best solution, best possible 203.43835 (1616.79 seconds)
Cbc0010I After 4300 nodes, 2163 on tree, 218 best solution, best possible 203.43835 (1633.70 seconds)
Cbc0010I After 4400 nodes, 2212 on tree, 218 best solution, best possible 203.43835 (1646.73 seconds)
Cbc0010I After 4500 nodes, 2263 on tree, 218 best solution, best possible 203.43835 (1659.12 seconds)
Cbc0010I After 4600 nodes, 2312 on tree, 218 best solution, best possible 203.43835 (1667.82 seconds)
Cbc0010I After 4700 nodes, 2367 on tree, 218 best solution, best possible 203.43835 (1679.23 seconds)
Cbc0010I After 4800 nodes, 2411 on tree, 218 best solution, best possible 203.43835 (1695.20 seconds)
Cbc0010I After 4900 nodes, 2460 on tree, 218 best solution, best possible 203.43835 (1712.07 seconds)
Cbc0010I After 5000 nodes, 2512 on tree, 218 best solution, best possible 203.43835 (1729.10 seconds)
Cbc0010I After 5100 nodes, 2563 on tree, 218 best solution, best possible 203.43835 (1744.35 seconds)
Cbc0010I After 5200 nodes, 2611 on tree, 218 best solution, best possible 203.43835 (1754.83 seconds)
Cbc0010I After 5300 nodes, 2662 on tree, 218 best solution, best possible 203.43835 (1765.06 seconds)
Cbc0010I After 5400 nodes, 2712 on tree, 218 best solution, best possible 203.43835 (1774.41 seconds)
Cbc0010I After 5500 nodes, 2760 on tree, 218 best solution, best possible 203.43835 (1787.43 seconds)
Cbc0010I After 5600 nodes, 2812 on tree, 218 best solution, best possible 203.43835 (1796.67 seconds)
Cbc0010I After 5700 nodes, 2861 on tree, 218 best solution, best possible 203.43835 (1805.12 seconds)
Cbc0010I After 5800 nodes, 2914 on tree, 218 best solution, best possible 203.43835 (1818.04 seconds)
Cbc0010I After 5900 nodes, 2961 on tree, 218 best solution, best possible 203.43835 (1828.67 seconds)
Cbc0010I After 6000 nodes, 3012 on tree, 218 best solution, best possible 203.43835 (1837.65 seconds)
Cbc0010I After 6100 nodes, 3063 on tree, 218 best solution, best possible 203.43835 (1857.34 seconds)
Cbc0010I After 6200 nodes, 3111 on tree, 218 best solution, best possible 203.43835 (1864.06 seconds)
Cbc0010I After 6300 nodes, 3160 on tree, 218 best solution, best possible 203.43835 (1876.21 seconds)
Cbc0010I After 6400 nodes, 3214 on tree, 218 best solution, best possible 203.43835 (1885.69 seconds)
Cbc0010I After 6500 nodes, 3265 on tree, 218 best solution, best possible 203.43835 (1897.68 seconds)
Cbc0010I After 6600 nodes, 3312 on tree, 218 best solution, best possible 203.43835 (1906.01 seconds)
Cbc0010I After 6700 nodes, 3396 on tree, 218 best solution, best possible 203.43835 (1923.90 seconds)
Cbc0010I After 6800 nodes, 3450 on tree, 218 best solution, best possible 203.43835 (1942.49 seconds)
Cbc0010I After 6900 nodes, 3463 on tree, 218 best solution, best possible 203.43835 (1970.31 seconds)
Cbc0010I After 7000 nodes, 3510 on tree, 218 best solution, best possible 203.43835 (1983.93 seconds)
Cbc0010I After 7100 nodes, 3562 on tree, 218 best solution, best possible 203.43835 (1994.57 seconds)
Cbc0010I After 7200 nodes, 3612 on tree, 218 best solution, best possible 203.43835 (2004.30 seconds)
Cbc0010I After 7300 nodes, 3662 on tree, 218 best solution, best possible 203.43835 (2017.83 seconds)
Cbc0010I After 7400 nodes, 3711 on tree, 218 best solution, best possible 203.43835 (2031.58 seconds)
Cbc0010I After 7500 nodes, 3760 on tree, 218 best solution, best possible 203.43835 (2044.47 seconds)
Cbc0010I After 7600 nodes, 3811 on tree, 218 best solution, best possible 203.43835 (2060.06 seconds)
Cbc0010I After 7700 nodes, 3862 on tree, 218 best solution, best possible 203.43835 (2070.80 seconds)
Cbc0010I After 7800 nodes, 3910 on tree, 218 best solution, best possible 203.43835 (2079.61 seconds)
Cbc0010I After 7900 nodes, 3961 on tree, 218 best solution, best possible 203.43835 (2090.25 seconds)
Cbc0010I After 8000 nodes, 4016 on tree, 218 best solution, best possible 203.43835 (2103.71 seconds)
Cbc0010I After 8100 nodes, 4061 on tree, 218 best solution, best possible 203.43835 (2118.83 seconds)
Cbc0010I After 8200 nodes, 4111 on tree, 218 best solution, best possible 203.43835 (2128.88 seconds)
Cbc0010I After 8300 nodes, 4161 on tree, 218 best solution, best possible 203.43835 (2140.02 seconds)
Cbc0010I After 8400 nodes, 4213 on tree, 218 best solution, best possible 203.43835 (2151.89 seconds)
Cbc0010I After 8500 nodes, 4260 on tree, 218 best solution, best possible 203.43835 (2170.88 seconds)
Cbc0010I After 8600 nodes, 4310 on tree, 218 best solution, best possible 203.43835 (2186.96 seconds)
Cbc0010I After 8700 nodes, 4360 on tree, 218 best solution, best possible 203.43835 (2198.91 seconds)
Cbc0010I After 8800 nodes, 4411 on tree, 218 best solution, best possible 203.43835 (2211.76 seconds)
Cbc0010I After 8900 nodes, 4462 on tree, 218 best solution, best possible 203.43835 (2223.31 seconds)
Cbc0010I After 9000 nodes, 4512 on tree, 218 best solution, best possible 203.43835 (2233.98 seconds)
Cbc0010I After 9100 nodes, 4563 on tree, 218 best solution, best possible 203.43835 (2254.07 seconds)
Cbc0010I After 9200 nodes, 4611 on tree, 218 best solution, best possible 203.43835 (2267.19 seconds)
Cbc0010I After 9300 nodes, 4662 on tree, 218 best solution, best possible 203.43835 (2280.19 seconds)
Cbc0010I After 9400 nodes, 4711 on tree, 218 best solution, best possible 203.43835 (2289.55 seconds)
Cbc0010I After 9500 nodes, 4762 on tree, 218 best solution, best possible 203.43835 (2300.06 seconds)
Cbc0010I After 9600 nodes, 4811 on tree, 218 best solution, best possible 203.43835 (2311.46 seconds)
Cbc0010I After 9700 nodes, 4862 on tree, 218 best solution, best possible 203.43835 (2333.28 seconds)
Cbc0010I After 9800 nodes, 4913 on tree, 218 best solution, best possible 203.43835 (2345.37 seconds)
Cbc0010I After 9900 nodes, 4962 on tree, 218 best solution, best possible 203.43835 (2362.74 seconds)
Cbc0010I After 10000 nodes, 5011 on tree, 218 best solution, best possible 203.43835 (2373.98 seconds)
Cbc0010I After 10100 nodes, 5062 on tree, 218 best solution, best possible 203.43835 (2382.97 seconds)
Cbc0010I After 10200 nodes, 5111 on tree, 218 best solution, best possible 203.43835 (2396.08 seconds)
Cbc0010I After 10300 nodes, 5162 on tree, 218 best solution, best possible 203.43835 (2410.73 seconds)
Cbc0010I After 10400 nodes, 5211 on tree, 218 best solution, best possible 203.43835 (2423.45 seconds)
Cbc0010I After 10500 nodes, 5276 on tree, 218 best solution, best possible 203.43835 (2440.19 seconds)
Cbc0010I After 10600 nodes, 5318 on tree, 218 best solution, best possible 203.43835 (2456.71 seconds)
Cbc0010I After 10700 nodes, 5375 on tree, 218 best solution, best possible 203.43835 (2470.92 seconds)
Cbc0010I After 10800 nodes, 5412 on tree, 218 best solution, best possible 203.43835 (2487.87 seconds)
Cbc0010I After 10900 nodes, 5461 on tree, 218 best solution, best possible 203.43835 (2508.59 seconds)
Cbc0010I After 11000 nodes, 5510 on tree, 218 best solution, best possible 203.43835 (2515.35 seconds)
Cbc0010I After 11100 nodes, 5561 on tree, 218 best solution, best possible 204.1872 (2862.29 seconds)
Cbc0010I After 11200 nodes, 5610 on tree, 218 best solution, best possible 204.49442 (3072.60 seconds)
Cbc0010I After 11300 nodes, 5659 on tree, 218 best solution, best possible 204.632 (3218.35 seconds)
Cbc0010I After 11400 nodes, 5710 on tree, 218 best solution, best possible 204.7311 (3344.94 seconds)
Cbc0010I After 11500 nodes, 5759 on tree, 218 best solution, best possible 204.85528 (3497.83 seconds)
Cbc0030I Thread 0 used 2911 times,  waiting to start 1.3647523,  15969 locks, 2.9856913 locked, 0.17171025 waiting for locks
Cbc0030I Thread 1 used 2897 times,  waiting to start 14.049898,  15841 locks, 2.9195917 locked, 0.10724902 waiting for locks
Cbc0030I Thread 2 used 2920 times,  waiting to start 18.835014,  15908 locks, 2.955694 locked, 0.11997223 waiting for locks
Cbc0030I Thread 3 used 2855 times,  waiting to start 22.468153,  15503 locks, 2.8843699 locked, 0.1257956 waiting for locks
Cbc0030I Main thread 936.35445 waiting for threads,  23298 locks, 0.049971342 locked, 0.049569845 waiting for locks
Cbc0020I Exiting on maximum time
Cbc0005I Partial search - best objective 218 (best possible 204.85528), took 2631365 iterations and 11580 nodes (3598.72 seconds)
Cbc0032I Strong branching done 10260 times (621006 iterations), fathomed 0 nodes and fixed 8 variables
Cbc0035I Maximum depth 78, 16327 variables fixed on reduced cost
Cuts at root node changed objective from 201.278 to 203.258
Probing was tried 70 times and created 5 cuts of which 0 were active after adding rounds of cuts (0.684 seconds)
Gomory was tried 3034 times and created 24517 cuts of which 21 were active after adding rounds of cuts (431.957 seconds)
Knapsack was tried 70 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.518 seconds)
Clique was tried 70 times and created 0 cuts of which 0 were active after adding rounds of cuts (0.204 seconds)
MixedIntegerRounding2 was tried 70 times and created 50 cuts of which 0 were active after adding rounds of cuts (4.108 seconds)
FlowCover was tried 70 times and created 5 cuts of which 0 were active after adding rounds of cuts (1.076 seconds)
TwoMirCuts was tried 3034 times and created 3233 cuts of which 0 were active after adding rounds of cuts (119.338 seconds)

Result - Stopped on time limit

Objective value:                218.00000000
Lower bound:                    204.855
Gap:                            0.06
Enumerated nodes:               11580
Total iterations:               2631365
Time (CPU seconds):             3600.53
Time (Wallclock seconds):       1040.02

Option for printingOptions changed from normal to all
Total time (CPU seconds):       3600.81   (Wallclock seconds):       1040.30



Status: Not Solved
Cut edges: [('y14', 'y14s1', 0), ('z7', 'o7', 0), ('t37', 't37s2', 0), ('t29', 't29s2', 0), ('y3', 'y3s1', 0), ('y9', 'y9s1', 0), ('t40', 't40s1', 0), ('t40', 't40s2', 0), ('t25', 't25s1', 0), ('y4', 'y4s1', 0), ('t22', 't22s0', 0), ('t32', 't33', 0), ('y15', 'y15s1', 0), ('z12', 'o12', 0), ('y10', 'y10s0', 0), ('t45', 't45s0', 0), ('t42', 't42s0', 0), ('t44', 't44s0', 0), ('y6', 'y6s1', 0), ('z0', 'o0', 0), ('y5', 'y5s0', 0), ('t20', 't24', 0), ('y16', 'y16s1', 0), ('x7', 'x7s1', 0), ('t7', 't7s1', 0), ('t27', 't27s1', 0), ('y1', 'y1s1', 0), ('y11', 'y11s0', 0), ('t23', 't23s1', 0), ('z8', 'o8', 0), ('t33', 't33s2', 0), ('t18', 't22', 0), ('y2', 'y2s1', 0), ('y12', 'y12s1', 0), ('y17', 'y17s0', 0), ('y7', 'y7s1', 0), ('z17', 'o17', 0), ('t21', 't21s1', 0), ('t24', 't24s2', 0), ('y14s0', 't13', 0), ('y14s0', 'z16', 0), ('t37s0', 'z10', 0), ('t37s0', 't44', 0), ('t37s0', 't41', 0), ('t37s0', 'z1', 0), ('t37s1', 'z10', 0), ('t37s1', 't44', 0), ('t37s1', 't41', 0), ('t37s1', 'z1', 0), ('t37s2', 'z10', 0), ('t37s3', 'z10', 0), ('t37s3', 't44', 0), ('t37s3', 't41', 0), ('t37s3', 'z1', 0), ('y13s0', 't7', 0), ('y13s0', 'z12', 0), ('t29s0', 't42', 0), ('t29s0', 'z14', 0), ('t29s0', 't39', 0), ('t29s0', 't43', 0), ('t29s1', 't42', 0), ('t29s1', 'z14', 0), ('t29s1', 't39', 0), ('t29s1', 'z5', 0), ('t29s1', 't43', 0), ('t29s2', 'z5', 0), ('t29s3', 't42', 0), ('t29s3', 'z14', 0), ('t29s3', 't39', 0), ('t29s3', 'z5', 0), ('t29s3', 't43', 0), ('t29s4', 't42', 0), ('t29s4', 'z14', 0), ('t29s4', 't39', 0), ('t29s4', 'z5', 0), ('t29s4', 't43', 0), ('y3s0', 't3', 0), ('y3s0', 'z10', 0), ('t26s1', 't27', 0), ('t26s1', 't31', 0), ('t16s0', 't20', 0), ('t16s1', 't18', 0), ('y9s0', 't12', 0), ('y9s0', 'z15', 0), ('t40s0', 'z4', 0), ('t40s0', 'z13', 0), ('t40s0', 't41', 0), ('t40s0', 't43', 0), ('t40s1', 'z13', 0), ('t40s2', 'z4', 0), ('t40s2', 't41', 0), ('t40s2', 't43', 0), ('t40s3', 'z4', 0), ('t40s3', 'z13', 0), ('t40s3', 't41', 0), ('t40s3', 't43', 0), ('y8s0', 'z17', 0), ('y8s1', 't15', 0), ('t25s0', 't40', 0), ('t25s0', 't28', 0), ('y4s0', 't5', 0), ('y4s0', 'z11', 0), ('t22s0', 't25', 0), ('t22s1', 't31', 0), ('t22s1', 't29', 0), ('t22s2', 't25', 0), ('t22s2', 't31', 0), ('t22s2', 't29', 0), ('y15s0', 't2', 0), ('y15s0', 'z0', 0), ('y10s1', 't15', 0), ('y10s1', 'z8', 0), ('t45s1', 'z7', 0), ('t45s1', 'z16', 0), ('t36s0', 't37', 0), ('t36s0', 't38', 0), ('t42s0', 'z6', 0), ('t42s1', 'z6', 0), ('t42s1', 'z15', 0), ('t42s1', 't45', 0), ('t42s2', 'z6', 0), ('t42s2', 'z15', 0), ('t42s2', 't45', 0), ('t44s1', 'z9', 0), ('t44s1', 'z0', 0), ('y6s0', 't3', 0), ('y6s0', 'z1', 0), ('t2s1', 't4', 0), ('t2s1', 't6', 0), ('y5s1', 't8', 0), ('y5s1', 'z13', 0), ('y16s0', 'z3', 0), ('y16s0', 't7', 0), ('x7s0', 'z2', 0), ('x7s0', 't5', 0), ('t7s0', 't9', 0), ('t7s0', 't11', 0), ('t27s0', 't35', 0), ('t27s0', 't38', 0), ('t27s0', 't28', 0), ('t27s1', 't38', 0), ('t27s2', 't35', 0), ('t27s2', 't28', 0), ('y1s0', 'z4', 0), ('y1s0', 't8', 0), ('y11s1', 'z6', 0), ('y11s1', 't12', 0), ('t23s0', 't34', 0), ('t23s0', 't26', 0), ('t23s1', 't30', 0), ('t23s2', 't34', 0), ('t23s2', 't26', 0), ('t23s2', 't30', 0), ('t41s0', 'z8', 0), ('t41s0', 't45', 0), ('t41s1', 't45', 0), ('t41s1', 'z17', 0), ('t41s2', 'z8', 0), ('t41s2', 'z17', 0), ('t12s0', 't16', 0), ('t12s1', 't14', 0), ('t33s0', 'z2', 0), ('t33s0', 't35', 0), ('t33s0', 't42', 0), ('t33s0', 't44', 0), ('t33s1', 't34', 0), ('t33s1', 'z2', 0), ('t33s1', 't35', 0), ('t33s1', 't42', 0), ('t33s1', 'z11', 0), ('t33s1', 't44', 0), ('t33s2', 't34', 0), ('t33s2', 'z11', 0), ('t33s2', 't44', 0), ('t33s3', 't34', 0), ('t33s3', 'z2', 0), ('t33s3', 't35', 0), ('t33s3', 't42', 0), ('t33s3', 'z11', 0), ('t33s3', 't44', 0), ('t33s4', 't34', 0), ('t33s4', 'z2', 0), ('t33s4', 't35', 0), ('t33s4', 't42', 0), ('t33s4', 'z11', 0), ('t33s5', 't34', 0), ('t33s5', 'z2', 0), ('t33s5', 't35', 0), ('t33s5', 't42', 0), ('t33s5', 'z11', 0), ('t33s5', 't44', 0), ('t14s1', 't17', 0), ('t14s1', 't19', 0), ('t43s0', 'z3', 0), ('t43s1', 'z3', 0), ('t43s1', 'z12', 0), ('y2s0', 'z14', 0), ('y2s0', 't10', 0), ('y12s0', 't2', 0), ('y12s0', 'z9', 0), ('y17s1', 'z7', 0), ('y17s1', 't13', 0), ('y7s0', 't10', 0), ('y7s0', 'z5', 0), ('t21s0', 't26', 0), ('t21s0', 't25', 0), ('t24s0', 't30', 0), ('t24s0', 't27', 0), ('t24s0', 't33', 0), ('t24s1', 't36', 0), ('t24s1', 't30', 0), ('t24s1', 't27', 0), ('t24s1', 't33', 0), ('t24s2', 't36', 0), ('t24s3', 't36', 0), ('t24s3', 't30', 0), ('t24s3', 't27', 0), ('t24s3', 't33', 0)]
Cut is NI True
Cut is SNI True

